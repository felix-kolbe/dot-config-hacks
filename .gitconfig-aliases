# Felix' set of helpful git aliases.
# Include by adding this to ~/.gitconfig:
#
# [include]
# 	path = .gitconfig-aliases
#

[alias]
	alias = "!sh -c '[ $# = 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1' -"
#	aliases = config --get-regex \"alias\\.\"
	aliases = ! git config --get-regexp 'alias.*' | sed 's/[ ]/ = /'

	new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
	s   = status
	si  = status --ignored
	ss  = status -s
	ssi = status -s --ignored
	ssu = status -s -uno

	diff-file-counts = ! echo "Overall changes:" && git diff --name-status | wc -l  &&  echo "Modified:" && git diff --name-status --diff-filter=M | wc -l  &&  echo "Deleted:" && git diff --name-status --diff-filter=D | wc -l  &&  echo "Added:" && git diff --name-status --diff-filter=A | wc -l  &&  echo "Remaining:" && git diff --name-status --diff-filter=mda | wc -l
	diff-file-counts-staged = ! echo "Overall changes:" && git diff --name-status --staged | wc -l  &&  echo "Modified:" && git diff --name-status --staged --diff-filter=M | wc -l  &&  echo "Deleted:" && git diff --name-status --staged --diff-filter=D | wc -l  &&  echo "Added:" && git diff --name-status --staged --diff-filter=A | wc -l  &&  echo "Remaining:" && git diff --name-status --staged --diff-filter=mda | wc -l

	d     = diff
	dd    = diff          --dirstat=0
	dst   = diff          --stat
	dstw  = diff          --stat=187
	ds    = diff --staged
	dsd   = diff --staged --dirstat=0
	dss   = diff --staged --stat
	dssw  = diff --staged --stat=187
	dur    = diff                       HEAD @{u}
	durd   = diff          --dirstat=0  HEAD @{u}
	durst  = diff          --stat       HEAD @{u}
	durstw = diff          --stat=187   HEAD @{u}
	du     = diff                       @{u} HEAD
	dud    = diff          --dirstat=0  @{u} HEAD
	dust   = diff          --stat       @{u} HEAD
	dustw  = diff          --stat=187   @{u} HEAD

	dwu  = diff                     --word-diff --unified=0
	dswu = diff --staged            --word-diff --unified=0
	dcw   = diff                     --color-words
	dcwc  = diff                     --color-words=.
	dcww  = diff                     --color-words='[A-z_0-9][A-z_0-9]*'
	dscw  = diff --staged            --color-words
	dscwc = diff --staged            --color-words=.
	dscww = diff --staged            --color-words='[A-z_0-9][A-z_0-9]*'

	shcw  = show                     --color-words
	shcwc = show                     --color-words=.
	shcww = show                     --color-words='[A-z_0-9][A-z_0-9]*'
	shst  = show --stat
	shstw = show --stat=187
	show-ws = show --ignore-space-at-eol

	df   = diff  *.c *.cpp *.h *.hpp *.ino
	
	rdu  = ! git range-diff $(git merge-base HEAD @{u}) @{u} HEAD

	ssd  = !" echo staged: && git ds --dirstat=0  ; echo not staged: && git d --dirstat=0"
	sss  = !" echo staged: && git dss  ; echo not staged: && git dst "
	sssw = !" echo staged: && git dssw ; echo not staged: && git dstw"

	l    = log --max-count=42  --oneline --decorate --graph
	ll   = log                 --oneline --decorate --graph
	ls   = log --max-count=42  --oneline --decorate --graph --stat
	lsw  = log --max-count=42  --oneline --decorate --graph --stat=187
	lG   = log --max-count=42  --oneline --decorate
	lGs  = log --max-count=42  --oneline --decorate         --stat
	lp   = log --max-count=42   --pretty --decorate --graph
	lpG  = log --max-count=42   --pretty --decorate
	lr   = log --max-count=42  --oneline --decorate --graph                                  --remotes         HEAD
	ldev = log --max-count=42  --oneline --decorate --graph                                                    HEAD dev origin/dev
	ld   = log --max-count=42  --oneline --decorate --graph                                                    HEAD develop origin/develop
	lb   = log --max-count=42  --oneline --decorate --graph                       --branches                   HEAD
	lbr  = log --max-count=42  --oneline --decorate --graph                       --branches --remotes         HEAD
	lbt  = log --max-count=42  --oneline --decorate --graph                       --branches           --tags  HEAD
	lbd  = log --max-count=42  --oneline --decorate --graph --date-order          --branches --remotes --tags  HEAD
	lbS  = log --max-count=42  --oneline --decorate --graph              --source --branches           --tags  HEAD
	lbrS = log --max-count=42  --oneline --decorate --graph              --source --branches --remotes --tags  HEAD
	lbs  = log --max-count=42  --oneline --decorate --graph --stat                --branches --remotes --tags  HEAD
	lbsn = log --max-count=42  --oneline --decorate --graph --stat                --branches --remotes --tags  HEAD
	lbsw = log --max-count=42  --oneline --decorate --graph --stat=187            --branches --remotes --tags  HEAD
	lbG  = log --max-count=42  --oneline --decorate                               --branches --remotes --tags  HEAD
	lpb  = log --max-count=42   --pretty --decorate --graph                       --branches --remotes --tags  HEAD
	lpbG = log --max-count=42   --pretty --decorate                               --branches --remotes --tags  HEAD
	ldevl = log                --oneline --decorate --graph                                                    HEAD dev origin/dev
	ldl   = log                --oneline --decorate --graph                                                    HEAD develop origin/develop
	lbl   = log                --oneline --decorate --graph                       --branches                   HEAD
	lbrl  = log                --oneline --decorate --graph                       --branches --remotes         HEAD
	lbtl  = log                --oneline --decorate --graph                       --branches           --tags  HEAD
	lbSl  = log                --oneline --decorate --graph              --source --branches --remotes --tags  HEAD
	lbsl  = log                --oneline --decorate --graph --stat                --branches --remotes --tags  HEAD
	lbsSl = log                --oneline --decorate --graph --stat       --source --branches --remotes --tags  HEAD
	lbswl = log                --oneline --decorate --graph --stat=187            --branches --remotes --tags  HEAD
	lbGl  = log                --oneline --decorate                               --branches --remotes --tags  HEAD
	lpbl  = log                 --pretty --decorate --graph                       --branches --remotes --tags  HEAD
	lpbGl = log                 --pretty --decorate                               --branches --remotes --tags  HEAD
	lt    = log                --oneline                                                                         --simplify-by-decoration
	ltb   = log                --oneline            --graph                       --branches                     --simplify-by-decoration
	ltt   = log                --oneline            --graph                                            --tags    --simplify-by-decoration
	ltbt  = log                --oneline            --graph                       --branches           --tags    --simplify-by-decoration
	ltr   = log                --oneline                                                     --remotes           --simplify-by-decoration
	ltbr  = log                --oneline            --graph                       --branches --remotes           --simplify-by-decoration
	lttr  = log                --oneline            --graph                                  --remotes --tags    --simplify-by-decoration
	ltbtr = log                --oneline            --graph                       --branches --remotes --tags    --simplify-by-decoration
	l1    = log --oneline --decorate -1
	blo   = log --oneline --decorate                    FETCH_HEAD..HEAD
#	blog   = log --oneline --decorate --graph            FETCH_HEAD..HEAD
#	blos   = log --oneline --decorate         --stat     FETCH_HEAD..HEAD
#	blosw  = log --oneline --decorate         --stat=187 FETCH_HEAD..HEAD
#	blosg  = log --oneline --decorate --graph --stat     FETCH_HEAD..HEAD
#	blosgw = log --oneline --decorate --graph --stat=187 FETCH_HEAD..HEAD
	bl    = log --oneline --decorate                    @{u}..HEAD
	blg   = log --oneline --decorate --graph            @{u}..HEAD
	bls   = log --oneline --decorate         --stat     @{u}..HEAD
	blsw  = log --oneline --decorate         --stat=187 @{u}..HEAD
	blsg  = log --oneline --decorate --graph --stat     @{u}..HEAD
	blsgw = log --oneline --decorate --graph --stat=187 @{u}..HEAD
	pl    = log --oneline --decorate                    @{u}...HEAD   #--max-count=30
	plg   = log --oneline --decorate --graph            @{u}...HEAD   #--max-count=30
	pls   = log --oneline --decorate         --stat     @{u}...HEAD   #--max-count=30
	plsw  = log --oneline --decorate         --stat=187 @{u}...HEAD   #--max-count=30
	plsg  = log --oneline --decorate --graph --stat     @{u}...HEAD   #--max-count=30
	plsgw = log --oneline --decorate --graph --stat=187 @{u}...HEAD   #--max-count=30
	# show graph of current branch and its upstream down to their merge base, but not more
	ml    = ! git log --oneline --decorate --graph            HEAD main ^$(git merge-base HEAD main)^
	mrl   = ! git log --oneline --decorate --graph            HEAD main ^$(git merge-base HEAD main)^ origin/main
	dl    = ! git log --oneline --decorate --graph            HEAD dev ^$(git merge-base HEAD dev)^
	drl   = ! git log --oneline --decorate --graph            HEAD dev ^$(git merge-base HEAD dev)^ origin/dev
	ul    = ! git log --oneline --decorate --graph            HEAD @{u} ^$(git merge-base HEAD @{u})^
	uls   = ! git log --oneline --decorate --graph --stat     HEAD @{u} ^$(git merge-base HEAD @{u})^
	ulsw  = ! git log --oneline --decorate --graph --stat=187 HEAD @{u} ^$(git merge-base HEAD @{u})^
	# show graph of current branch and last fetch head down to their merge base, but not more
	fl    = ! git log --oneline --decorate --graph            HEAD FETCH_HEAD ^$(git merge-base HEAD FETCH_HEAD)^
	fls   = ! git log --oneline --decorate --graph --stat     HEAD FETCH_HEAD ^$(git merge-base HEAD FETCH_HEAD)^
	flsw  = ! git log --oneline --decorate --graph --stat=187 HEAD FETCH_HEAD ^$(git merge-base HEAD FETCH_HEAD)^

	list-remote-branches-fancy = ! git for-each-ref --sort=committerdate --format='%(refname:short) *  %(authorname) * %(committerdate:relative)' refs/remotes/ | column -t -s '*'

	us = up-stat
	usd = up-stat-dir
	up-stat = ! echo "Details:" && git plsgw  &&  echo "Combined:" && git dstw HEAD...@{u} --stat=200
	up-stat-dir = ! echo "Details Dirstat:" && git plg --dirstat=0  &&  echo "Combined Dirstat:" && git d HEAD...@{u} --dirstat=0
	fetch-stat = ! git fetch && git up-stat
	fetch-ul = ! git fetch && git ul
	ful = ! git fetch && git ul
	ffl = ! git fetch && git fl
	flb = ! git fetch && git lb
	flbr = ! git fetch && git lbr
	fdrl = ! git fetch && git drl
	fmrl = ! git fetch && git mrl

	list-commits-in-branch-from-main = log main...HEAD --oneline --no-decorate --reverse
	list-commits-in-branch-from-main-pretty = ! git list-commits-in-branch-from-main | cut -d ' ' --complement -f 1 | xargs -i echo '* {} '
	list-modified-files-in-branch-from-main = diff main...HEAD --name-only
	list-modified-files-in-branch-from-main-and-stage = ! git diff main...HEAD --name-only | xargs -n 1 git add --update

	list-lost-autostashes = ! git log --pretty='%cr: %h %s' $(git fsck --no-reflog | grep '^dangling commit' | cut -f3 -d\\ ) | grep ': autostash$'

	log-filter-for-token = log -p -S

	sl  = stash list
	stl = stash list
	ssp = stash show -p
	ssh = stash show
	stp = stash pop
	std = stash drop
	sta = stash apply

	p = stage --patch
	ps = stage -p *.c *.cpp *.h *.hpp *.ino

	aul = add -u .
	amend = commit --amend
	mff = !mff() { git merge --ff-only "$1" && git reset --hard HEAD@{1} && git merge --no-ff "$1"; }; mff

	ri   = rebase --interactive
	riaa = rebase --interactive --autostash --autosquash
	riaa7 = riaa HEAD^^^^^^^
	riaa-branch-of-main = ! git riaa $(git merge-base HEAD main)
	ra   = rebase               --autostash
	raa  = rebase               --autostash --autosquash
	rc   = rebase --continue
	rscp = rebase --show-current-patch

	rebase-exec-build             = rebase -i --autosquash --exec 'fmake build || ( fmake clean && fmake build )'
	rebase-exec-build-test        = rebase -i --autosquash --exec '( fmake build || ( fmake clean && fmake build ) ) && fmake test'
	rebase-exec-build-time        = rebase -i --autosquash --exec 'time fmake build || ( ls && time fmake clean && time fmake build )'

	# 'ls' to put something catchy in the terminal to show that a clean was necessary
	rebase-exec-build-time        = rebase -i --exec 'time fmake build || ( ls && time fmake clean && time fmake build )'
	# create a log for commits requiring a clean build
	rebase-exec-build-log-cleaned = rebase -i --exec "time fmake build || ( git show --stat >> REBASE_COMMITS_REQUIRING_CLEAN_BUILD && time fmake clean && time fmake build )"

	riaa-exec-build           = riaa --exec 'fmake build || ( fmake clean && fmake build )'
	riaa-exec-build-log-clean = riaa --exec 'fmake build || ( ( echo ----- && date && git show --stat ) >> REBASE_COMMITS_REQUIRING_CLEAN_BUILD && fmake clean && fmake build )' --reschedule-failed-exec
#	riaa-exec-build-log-clean = riaa --exec 'fmake-build-clean-log'
	riaa-exec-build-test      = riaa --exec '( fmake build || ( fmake clean && fmake build ) ) && fmake test'
	riaa-exec-build-time      = riaa --exec 'time fmake build || ( ls && time fmake clean && time fmake build )'
	riaa-exec-test            = riaa --exec '( fmake test && ( ( echo ----- && date && git show --stat ) >> REBASE_COMMITS_TEST_PASSES ) ) || ( ( echo ----- && date && git show --stat ) >> REBASE_COMMITS_TEST_FAILS )'


	pura = pull --rebase --autostash  --verbose --stat
	puri = pull --rebase=interactive
	pupu = ! git pull --verbose --stat && git push --verbose --progress
	purapu = ! git pura && git push --verbose --progress
	mff = merge --ff-only
	mt = mergetool

	b   = branch
	bv  = branch -l -v
	bvg = ! git bv --color | grep --color -e 'gone' -e 'ahead' -e ''
	bvgf = ! git bv --color | grep --color gone | grep --color -e 'gone' -e 'ahead' -e ''
	bvv = branch -l -vv
	bvvb = ! git bvv --color | grep --color -e 'behind' -e ''
	bvva = ! git bvv --color | grep --color -e ', behind' -e 'ahead' -e ''
	bvvg = ! git bvv --color | grep --color -e ': gone' -e 'ahead' -e ''

	bvs  = branch --format='%(refname:short)'
	bvsa = branch --all --format='%(refname:short)'
	bvsr = branch --remotes --format='%(refname:short)'

	bb = !~/dot-config-hacks/better-git-branch/better-git-branch.sh
	rf = !~/dot-config-hacks/git-related-files/git-related-files.sh

	git = !git
	co = checkout
	cod = checkout --detach

	sw = switch
	sw-st-pll-upd-main = ! git stash && git sw main && git pull --ff && git stp
	sw-st-pll-upd-dev = ! git stash && git sw dev && git pull --ff && git stp
	sw-main-pull = ! git sw main && git pull --ff
	sw-main-pull-sw-back-ml = ! git sw main && git pull --ff && git sw - && git ml
	sw-dev-pull = ! git sw dev && git pull --ff
	sw-develop-pull = ! git sw develop && git pull --ff
	cp = cherry-pick
	wl = worktree list

	su = submodule update
	sur = submodule update --recursive
	suri = submodule update --recursive --init

	fetch = fetch -v

	blame-ignore-whitespace1 = blame -w -C
	blame-ignore-whitespace2 = blame -w -C -C
	blame-ignore-whitespace3 = blame -w -C -C -C

	# ignoring known files:
	# git update-index --skip-worktree path/file.cfg
	# un-ignore:
	# git update-index --no-skip-worktree path/file.cfg
	skip = update-index --skip-worktree
	unskip = update-index --no-skip-worktree
	# list changes in ignored files:
	ls-ignored-changes = !git ls-files -v | grep ^S | awk '{print $2}'
	ls-skipped = !git ls-files -v | grep '^S'
	# skip all files shown by git status - carful!!
	skip-all-local-changes-careful = !git ss | cut -c 3-  | xargs -n 1 --verbose  git skip


	tags = !"git for-each-ref  --sort=taggerdate  --format '%(tag)_,,,_%(taggerdate:raw)_,,,_%(taggername)_,,,_%(subject)' refs/tags | awk 'BEGIN { FS = \"_,,,_\"  } ; { t=strftime(\"%Y-%m-%d  %H:%M\",$2); printf \"%-20s %-18s %-25s %s\\n\", t, $1, $4, $3  }'"

	update-sparse = read-tree -mu HEAD

	lhist = log --graph --date-order --date=short --pretty=format:'%C(auto)%h%d %C(reset)%s %C(bold blue)%ce %C(reset)%C(green)%cr (%cd)'
	# from Slipp D. Thompson
	lh1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
	lh2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
	lh3 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'
	lh1a = lh1 --all
	lh2a = lh2 --all
	lh3a = lh3 --all

	aliasshelltest = ! echo x $1 x  &&  echo y $2 y && echo z $3 z
	tag-n-push = !" git tag $1  ;  git tag -l $1  &&  git push -v jenkins $1  &&  touch ./my-built-tags/$1  #; echo done. rest: "

	proxy-disable = !" ( git config --global http.proxy-NOT $(git config --get http.proxy    )  &&  git config --global --unset http.proxy     ) ;  echo Proxy: && git config --default NULL --get http.proxy "
	proxy-enable  = !" ( git config --global http.proxy     $(git config --get http.proxy-NOT)  &&  git config --global --unset http.proxy-NOT ) ;  echo Proxy: && git config --default NULL --get http.proxy "
	proxy-status  = config --get http.proxy
	# grep returns 0 if _found_ -- 0 = true
	# proxy-status returns 0 if _found_
	pu = proxy-update
#	proxy-update  = ! ( netsh interface show interface | grep VPN | grep -c "Getrennt" && git config --get http.proxy-NOT || git proxy-disable ) || ( git config --get http.proxy || git proxy-enable )
#	proxy-update  = !" ( netsh interface show interface | grep VPN | grep -c "Getrennt" && git proxy-disable ) || ( git proxy-enable ) "
#	proxy-update  = !" ( netsh interface show interface | grep VPN | grep "Getrennt" ; NOVPN=$? ; echo $NOVPN ; ( [ $NOVPN -eq 0 ] && echo NO VPN && git config --get http.proxy && echo DISABLING PROXY && git proxy-disable ) || ( [ $NOVPN -ne 0 ] && echo VPN YES && git config --get http.proxy-NOT && echo ENABLING PROXY && git proxy-enable ) ) "
	proxy-update  = !" VPNSTAT=$(/c/WINDOWS/system32/netsh interface show interface | grep VPN ) ; echo $VPNSTAT ; ( [[ "$VPNSTAT" == *"Getrennt"* ]] && ( echo VPN NO && ( git config --get http.proxy && echo DISABLING PROXY && git proxy-disable ) || echo NO PROXY CHANGE ) ) || ( [[ "$VPNSTAT" == *"Verbunden"* ]] && ( echo VPN YES && ( git config --get http.proxy-NOT && echo ENABLING PROXY && git proxy-enable ) || echo NO PROXY CHANGE ) )"

	fetchp = !" git proxy-update && git fetch || echo ERROR fetchp"
	fus  = !" git fetch && git up-stat || echo ERROR fus"
	pfus = !" git fetchp && git up-stat || echo ERROR pfus"
	pullp = !" git proxy-update && git pull || echo ERROR pushp"
	pushp = !" git proxy-update && git push || echo ERROR pullp"
	push-fl = push --force-with-lease

	#branchupdate = ! git checkout $1  &&  git pull --rebase y $2 y && echo
	#branchupdate = ! bash -c git_branch_update
	#updatebranches = ! bash -c git_update_branches
	update-all = ! git_update_branches build-preparations local-dev-base usual-debugging future-improvements  permanent-debug-archive
	replace-branch-with-tag = ! git tag $1 $1  &&  echo Created tag should show up here:  &&  git tag -l $1  &&  git branch -v -D $1  &&  echo done.

	remove-tracked-files = ! git ls-files -z | xargs --null rm
	remove-tracked-files-verbose = ! git ls-files -z | xargs --null --verbose rm
	remove-tracked-files-verbose-interactive = ! git ls-files -z | xargs --null --verbose --interactive  rm


#	stsh = ! CURRENT=$(git symbolic-ref HEAD) && git symbolic-ref HEAD refs/heads/stash && git commit -a -m stashed && git checkout $CURRENT
